{"version":3,"sources":["webpack:///./src/$_lazy_route_resource lazy namespace object","webpack:///./src/app/app-routing.module.ts","webpack:///./src/app/app.component.html","webpack:///./src/app/app.component.scss","webpack:///./src/app/app.component.ts","webpack:///./src/app/app.module.ts","webpack:///./src/app/automatisation/automatisation.module.ts","webpack:///./src/app/automatisation/container/automatisation-view/automatisation-view.component.html","webpack:///./src/app/automatisation/container/automatisation-view/automatisation-view.component.scss","webpack:///./src/app/automatisation/container/automatisation-view/automatisation-view.component.ts","webpack:///./src/app/dashboard/components/settings/settings.component.html","webpack:///./src/app/dashboard/components/settings/settings.component.scss","webpack:///./src/app/dashboard/components/settings/settings.component.ts","webpack:///./src/app/dashboard/container/dashboard-view/dashboard-view.component.html","webpack:///./src/app/dashboard/container/dashboard-view/dashboard-view.component.scss","webpack:///./src/app/dashboard/container/dashboard-view/dashboard-view.component.ts","webpack:///./src/app/dashboard/dashboard-routing.module.ts","webpack:///./src/app/dashboard/dashboard.module.ts","webpack:///./src/app/home/container/home-view/home-view.component.html","webpack:///./src/app/home/container/home-view/home-view.component.scss","webpack:///./src/app/home/container/home-view/home-view.component.ts","webpack:///./src/app/home/home.module.ts","webpack:///./src/app/shared/components/devices/components/device/device.component.html","webpack:///./src/app/shared/components/devices/components/device/device.component.scss","webpack:///./src/app/shared/components/devices/components/device/device.component.ts","webpack:///./src/app/shared/components/devices/components/devices/devices.component.html","webpack:///./src/app/shared/components/devices/components/devices/devices.component.scss","webpack:///./src/app/shared/components/devices/components/devices/devices.component.ts","webpack:///./src/app/shared/components/navbar/navbar.component.html","webpack:///./src/app/shared/components/navbar/navbar.component.scss","webpack:///./src/app/shared/components/navbar/navbar.component.ts","webpack:///./src/app/shared/components/notification/notification.component.html","webpack:///./src/app/shared/components/notification/notification.component.scss","webpack:///./src/app/shared/components/notification/notification.component.ts","webpack:///./src/app/shared/components/scenes/components/scene/scene.component.html","webpack:///./src/app/shared/components/scenes/components/scene/scene.component.scss","webpack:///./src/app/shared/components/scenes/components/scene/scene.component.ts","webpack:///./src/app/shared/components/scenes/components/scenes/scenes.component.html","webpack:///./src/app/shared/components/scenes/components/scenes/scenes.component.scss","webpack:///./src/app/shared/components/scenes/components/scenes/scenes.component.ts","webpack:///./src/app/shared/models/notification-types.enum.ts","webpack:///./src/app/shared/models/notification.model.ts","webpack:///./src/app/shared/services/device-improvement.service.ts","webpack:///./src/app/shared/services/device.service.ts","webpack:///./src/app/shared/services/notification.service.ts","webpack:///./src/app/shared/services/scene.service.ts","webpack:///./src/app/shared/shared.module.ts","webpack:///./src/app/shared/store/store.ts","webpack:///./src/environments/environment.ts","webpack:///./src/http-interceptor/index.ts","webpack:///./src/http-interceptor/noop-interceptor.ts","webpack:///./src/main.ts"],"names":[],"mappings":"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","file":"main.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./src/$$_lazy_route_resource lazy recursive\";","import { Routes, RouterModule } from \"@angular/router\";\nimport { AutomatisationViewComponent } from \"src/app/automatisation/container/automatisation-view/automatisation-view.component\";\nimport { HomeViewComponent } from \"src/app/home/container/home-view/home-view.component\";\nimport { NgModule } from \"@angular/core\";\n\nconst appRoutes: Routes = [\n  { path: \"automatisation\", component: AutomatisationViewComponent },\n  { path: \"home\", component: HomeViewComponent },\n  { path: \"**\", redirectTo: \"dashboard\"}\n];\n\n@NgModule({\n    imports: [\n      RouterModule.forRoot(appRoutes)\n    ],\n    exports: [\n      RouterModule\n    ]\n  })\n  export class AppRoutingModule {}","module.exports = \"<div class=\\\"main container\\\">\\n  <router-outlet></router-outlet>\\n</div>\\n<app-navbar></app-navbar>\\n<app-notification></app-notification>\\n\"","module.exports = \"div.main {\\n  padding-top: 70px;\\n  padding-bottom: 70px;\\n  position: relative; }\\n\\nh1 {\\n  color: #fff; }\\n\"","import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.scss']\n})\nexport class AppComponent {\n  title = 'domotic';\n\n  constructor() {\n  }\n}\n","import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\nimport { httpInterceptorProviders } from \"./../http-interceptor\";\n\nimport { AppComponent } from './app.component';\nimport { DashboardModule } from './dashboard/dashboard.module';\nimport { SharedModule } from './shared/shared.module';\nimport { AutomatisationModule } from './automatisation/automatisation.module';\nimport { HomeModule } from './home/home.module';\nimport { AppRoutingModule } from './app-routing.module';\nimport { ServiceWorkerModule } from '@angular/service-worker';\nimport { environment } from '../environments/environment';\n\n@NgModule({\n  declarations: [\n    AppComponent,\n  ],\n  imports: [\n    BrowserModule,\n    SharedModule,\n    DashboardModule,\n    AutomatisationModule,\n    HomeModule,\n    AppRoutingModule,\n    ServiceWorkerModule.register('ngsw-worker.js', { enabled: environment.production })\n  ],\n  providers: [httpInterceptorProviders],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { SharedModule } from '../shared/shared.module';\nimport { AutomatisationViewComponent } from './container/automatisation-view/automatisation-view.component';\n\n@NgModule({\n  imports: [\n    CommonModule, \n    SharedModule\n  ],\n  declarations: [\n    AutomatisationViewComponent\n  ]\n})\nexport class AutomatisationModule { }\n","module.exports = \"<app-scenes></app-scenes>\"","module.exports = \"\"","import { Component, OnInit } from '@angular/core';\nimport { SceneService } from 'src/app/shared/services/scene.service';\n\n@Component({\n  selector: 'app-automatisation-view',\n  templateUrl: './automatisation-view.component.html',\n  styleUrls: ['./automatisation-view.component.scss']\n})\nexport class AutomatisationViewComponent implements OnInit {\n\n  constructor(private sceneService: SceneService) { }\n\n  ngOnInit() {\n    this.sceneService.getScenes().subscribe();\n  }\n\n}\n","module.exports = \"<div class=\\\"settings\\\">\\n    <a *ngIf=\\\"!(devicesEditable$ | async); else saveBtn\\\" class=\\\"btn btn-secondary btn-edit mr-3\\\" (click)=\\\"handleClickEdit()\\\">\\n      Modifier\\n    </a>\\n    <ng-template #saveBtn>\\n      <a class=\\\"btn btn-secondary btn-edit mr-3\\\" (click)=\\\"handleClickSave()\\\">Ok</a>\\n    </ng-template>\\n    <a href=\\\"{{addDeviceUrl}}\\\" class=\\\"btn btn-secondary btn-add\\\">+</a>\\n</div>\"","module.exports = \"div.settings {\\n  position: absolute;\\n  right: 10px;\\n  top: 10px; }\\n  div.settings a {\\n    background-color: rgba(0, 0, 0, 0.5);\\n    color: #eeeeee;\\n    font-weight: 100;\\n    text-transform: none; }\\n  div.settings a.btn-add {\\n      border-radius: 100%;\\n      font-size: 22px;\\n      padding: 0px 10px; }\\n  div.settings a.btn-edit {\\n      font-size: 16px;\\n      border-radius: 20px;\\n      padding: 2px 16px; }\\n\"","import { Component, OnInit } from '@angular/core';\nimport { Store, DefaultStoreDataNames } from 'src/app/shared/store/store';\nimport { Observable } from 'rxjs';\nimport { environment } from 'src/environments/environment';\n\n@Component({\n  selector: 'app-settings',\n  templateUrl: './settings.component.html',\n  styleUrls: ['./settings.component.scss']\n})\n\nexport class SettingsComponent implements OnInit {\n\n  public addDeviceUrl = environment.domoticzUrl + '/#/Hardware';\n  public devicesEditable$: Observable<boolean>;\n\n  constructor(private store: Store) { }\n\n  ngOnInit() {\n    this.devicesEditable$ = this.store.select<boolean>(DefaultStoreDataNames.DEVICES_EDITABLE);\n  }\n\n  handleClickEdit(): void {\n    this.store.set(DefaultStoreDataNames.DEVICES_EDITABLE, true);\n  }\n\n  handleClickSave(): void {\n    this.store.set(DefaultStoreDataNames.DEVICES_EDITABLE, false);\n  }\n\n}\n","module.exports = \"<app-settings></app-settings>\\n<h1 class=\\\"mb-0\\\">Scènes favoris</h1>\\n<app-scenes [favoriteView]=\\\"true\\\"></app-scenes>\\n<h1 class=\\\"mb-0 mt-3\\\">Accessoires favoris</h1>\\n<app-devices></app-devices>\"","module.exports = \"h1 {\\n  color: #fff;\\n  font-size: 1rem; }\\n\"","import { Component, OnInit } from '@angular/core';\nimport { DeviceService } from 'src/app/shared/services/device.service';\nimport { SceneService } from 'src/app/shared/services/scene.service';\n\n@Component({\n  selector: 'app-dashboard-view',\n  templateUrl: './dashboard-view.component.html',\n  styleUrls: ['./dashboard-view.component.scss']\n})\nexport class DashboardViewComponent implements OnInit {\n\n  constructor(private deviceService: DeviceService, private sceneService: SceneService) { }\n\n  ngOnInit() {\n    this.deviceService.getDevices({favorite: \"1\"}).subscribe();\n    this.sceneService.getScenes().subscribe();\n  }\n\n}\n","import { NgModule } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\nimport { DashboardViewComponent } from './container/dashboard-view/dashboard-view.component';\n \nconst heroesRoutes: Routes = [\n  { path: 'dashboard',  component: DashboardViewComponent }\n];\n \n@NgModule({\n  imports: [\n    RouterModule.forChild(heroesRoutes)\n  ],\n  exports: [\n    RouterModule\n  ]\n})\nexport class DashboardRoutingModule { }","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { SharedModule } from '../shared/shared.module';\nimport { DashboardViewComponent } from './container/dashboard-view/dashboard-view.component';\nimport { SettingsComponent } from './components/settings/settings.component';\nimport { DashboardRoutingModule } from './dashboard-routing.module';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    SharedModule,\n    DashboardRoutingModule\n  ],\n  declarations: [\n    DashboardViewComponent,\n    SettingsComponent\n  ]\n})\nexport class DashboardModule { }\n","module.exports = \"<app-devices></app-devices>\"","module.exports = \"\"","import { Component, OnInit } from '@angular/core';\nimport { DeviceService } from 'src/app/shared/services/device.service';\n\n@Component({\n  selector: 'app-home-view',\n  templateUrl: './home-view.component.html',\n  styleUrls: ['./home-view.component.scss']\n})\nexport class HomeViewComponent implements OnInit {\n\n  constructor(private deviceService: DeviceService) { }\n\n  ngOnInit() {\n    this.deviceService.getDevices().subscribe();\n  }\n\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { HomeViewComponent } from './container/home-view/home-view.component';\nimport { SharedModule } from '../shared/shared.module';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    SharedModule\n  ],\n  declarations: [\n    HomeViewComponent\n  ]\n})\nexport class HomeModule { }\n","module.exports = \"<div class=\\\"card\\\" [class.off]=\\\"device.SubType === 'Switch' && device.Status === 'Off'\\\" (click)=\\\"handleClick()\\\">\\n  <div class=\\\"card-body pr-3 pl-3 pt-2 pb-2\\\">\\n    <div class=\\\"row\\\">\\n      <div class=\\\"col pr-2 pl-2\\\">\\n        <img src=\\\"assets/images/{{device.TypeImg}}.png\\\" class=\\\"device-img\\\" alt=\\\"device icon\\\">\\n      </div>\\n    </div>\\n    <div class=\\\"row mt-2\\\">\\n      <div class=\\\"col pr-2 pl-2 device-name\\\">\\n        <span *ngIf=\\\"!devicesEditable; else editDescription\\\">\\n          {{ device.Description }}\\n        </span>\\n        <ng-template #editDescription>\\n          <input type=\\\"text\\\" class=\\\"form-control\\\" value=\\\"{{device.Description}}\\\" (focusout)=\\\"handleFocusOutDescription($event)\\\">\\n        </ng-template>\\n      </div>\\n    </div>\\n    <div class=\\\"row\\\">\\n      <div class=\\\"col pr-2 pl-2 device-name\\\">\\n        <span *ngIf=\\\"!devicesEditable; else editName\\\">\\n          {{ device.Name }}\\n        </span>\\n        <ng-template #editName>\\n            <input id=\\\"deviceName\\\" type=\\\"text\\\" class=\\\"form-control\\\" value=\\\"{{device.Name}}\\\" (focusout)=\\\"handleFocusOutName($event)\\\">\\n        </ng-template>\\n      </div>\\n    </div>\\n    <div class=\\\"row\\\">\\n      <div class=\\\"col pr-2 pl-2 font-weight-light\\\">\\n        <span *ngIf=\\\"device.SwitchType == 'Dimmer'; else data\\\">{{ device.Level}}%</span>\\n        <ng-template #data>\\n            {{ device.Data }}\\n        </ng-template>\\n      </div>\\n    </div>\\n  </div>\\n</div>\\n\"","module.exports = \"div.card {\\n  cursor: pointer;\\n  border-radius: 10px; }\\n  div.card.off {\\n    background-color: rgba(255, 255, 255, 0.6); }\\n  div.card img.device-img {\\n    height: 30px; }\\n  div.card .form-control {\\n    background-image: linear-gradient(0deg, #3f51b5 2px, rgba(63, 81, 181, 0) 0), linear-gradient(0deg, rgba(0, 0, 0, 0.26) 1px, transparent 0);\\n    font-size: .875rem; }\\n  div.card .form-control:focus {\\n      box-shadow: none; }\\n  div.card input[type=\\\"text\\\"] {\\n    height: 20.8px; }\\n  div.card .device-name span {\\n    white-space: nowrap;\\n    overflow: hidden;\\n    text-overflow: ellipsis; }\\n\"","import { Component, OnInit, Input } from '@angular/core';\nimport { Store, DefaultStoreDataNames } from 'src/app/shared/store/store';\nimport { Device } from '../../../../models/device.model';\n\n@Component({\n  selector: 'app-device',\n  templateUrl: './device.component.html',\n  styleUrls: ['./device.component.scss']\n})\nexport class DeviceComponent implements OnInit {\n\n  @Input()\n  device: Device;\n\n  devicesEditable: boolean;\n\n  constructor(private store: Store) { }\n\n  ngOnInit() {\n    this.store.select<boolean>(DefaultStoreDataNames.DEVICES_EDITABLE)\n    .subscribe(devicesEditable => this.devicesEditable = devicesEditable);\n  }\n\n  handleClick(): void{\n    if(!this.devicesEditable && this.device.hasOwnProperty('switchState'))\n      this.device.switchState().subscribe();\n  }\n  \n  handleFocusOutName(event: any): void {\n    this.device.updateName(event.target.value).subscribe();\n  }\n\n  handleFocusOutDescription(event: any): void {\n    this.device.updateDescription(event.target.value).subscribe();\n  }\n\n}\n","module.exports = \"<div class=\\\"row pr-2 pl-2\\\">\\n  <div *ngFor=\\\"let device of devices$ | async\\\" class=\\\"p-1 col-4 col-lg-2 mt-0\\\">\\n    <app-device [device]=\\\"device\\\"></app-device>\\n  </div>\\n</div>\"","module.exports = \"\"","import { Component, OnInit } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { Store, DefaultStoreDataNames } from 'src/app/shared/store/store';\nimport { Devices } from '../../../../models/devices.model';\n\n@Component({\n  selector: 'app-devices',\n  templateUrl: './devices.component.html',\n  styleUrls: ['./devices.component.scss']\n})\nexport class DevicesComponent implements OnInit {\n\n  devices$: Observable<Devices> \n\n  constructor(private store: Store) { }\n\n  ngOnInit() {\n    this.devices$ = this.store.select<Devices>(DefaultStoreDataNames.DEVICES);\n  }\n}\n","module.exports = \"<nav class=\\\"navbar fixed-bottom navbar-light\\\">\\n  <div class=\\\"col text-center\\\">\\n    <a [routerLink]=\\\"['/dashboard']\\\" routerLinkActive=\\\"active\\\">\\n      <fa-icon [icon]=\\\"faTachometerAlt\\\"></fa-icon>\\n      <div class=\\\"text-logo\\\">\\n        Dashboard\\n      </div>\\n    </a>\\n  </div>\\n  <div class=\\\"col text-center\\\">\\n    <a [routerLink]=\\\"['/home']\\\" routerLinkActive=\\\"active\\\">\\n      <fa-icon [icon]=\\\"faHome\\\"></fa-icon>\\n      <div class=\\\"text-logo\\\">\\n        Maison\\n      </div>\\n    </a>\\n  </div>\\n  <div class=\\\"col text-center\\\">\\n    <a [routerLink]=\\\"['/automatisation']\\\" routerLinkActive=\\\"active\\\">\\n      <fa-icon [icon]=\\\"faClock\\\"></fa-icon>\\n      <div class=\\\"text-logo\\\">\\n        Automatisation\\n      </div>\\n    </a>\\n  </div>\\n</nav>\"","module.exports = \".navbar {\\n  background-color: rgba(0, 0, 0, 0.75);\\n  padding: 0 0 10px 0; }\\n  .navbar div.col a {\\n    color: #aaa; }\\n  .navbar div.col a.active {\\n      color: orange; }\\n  .navbar div.col a.active .text-logo {\\n        color: orange; }\\n  .navbar div.col a:hover {\\n      text-decoration: none; }\\n  .navbar div.col a fa-icon {\\n      font-size: 1.8rem; }\\n  .navbar div.col a .text-logo {\\n      font-size: 0.65rem;\\n      color: #aaa; }\\n  @media only screen and (device-width: 375px) and (device-height: 812px) and (-webkit-device-pixel-ratio: 3) {\\n  .navbar {\\n    padding-bottom: 40px; } }\\n\"","import { Component, OnInit } from '@angular/core';\nimport { faHome, faClock, faTachometerAlt } from '@fortawesome/free-solid-svg-icons';\n\n@Component({\n  selector: 'app-navbar',\n  templateUrl: './navbar.component.html',\n  styleUrls: ['./navbar.component.scss']\n})\nexport class NavbarComponent implements OnInit {\n\n  public faHome = faHome;\n  public faClock = faClock;\n  public faTachometerAlt = faTachometerAlt;\n\n  constructor() { }\n\n  ngOnInit() {\n  }\n\n}\n","module.exports = \"<div *ngIf=\\\"notification?.displayed\\\" class=\\\"notification alert fixed-bottom m-4 alert-{{notification?.type}}\\\"\\n  role=\\\"alert\\\">\\n  <div class=\\\"container\\\">\\n    {{notification?.message}}\\n  </div>\\n</div>\"","module.exports = \".notification {\\n  box-shadow: 2px 2px 5px 0 rgba(0, 0, 0, 0.2); }\\n\"","import { Component, OnInit } from '@angular/core';\nimport { NotificationService } from '../../services/notification.service';\nimport { Notification } from '../../models/notification.model';\n\n@Component({\n  selector: 'app-notification',\n  templateUrl: './notification.component.html',\n  styleUrls: ['./notification.component.scss']\n})\nexport class NotificationComponent implements OnInit {\n\n  public notification: Notification;\n\n  constructor(private notificationService: NotificationService) {\n  }\n\n  ngOnInit() {\n    this.notificationService.notificationSubject.subscribe(\n      notification => this.notification = notification\n    );\n  }\n}\n","module.exports = \"<div class=\\\"card\\\" (click)=\\\"handleClick()\\\">\\n  <div class=\\\"card-body pr-3 pl-3 pt-2 pb-2\\\">\\n    <div class=\\\"row pb-2\\\">\\n      <div class=\\\"col\\\">\\n        <fa-icon [icon]=\\\"faHome\\\"></fa-icon>\\n      </div>\\n    </div>\\n    <div class=\\\"row\\\">\\n      <div class=\\\"col\\\">\\n        <span class=\\\"text-bold\\\">{{scene.Name}}</span>\\n      </div>\\n    </div>\\n  </div>\\n</div>\"","module.exports = \".card {\\n  border-radius: 10px; }\\n\\nfa-icon {\\n  font-size: 1.5rem;\\n  color: orange; }\\n\"","import { Component, OnInit, Input } from '@angular/core';\nimport { faHome } from '@fortawesome/free-solid-svg-icons';\nimport { Scene } from 'src/app/shared/models/scene.model';\nimport { SceneService } from 'src/app/shared/services/scene.service';\n\n\n@Component({\n  selector: 'app-scene',\n  templateUrl: './scene.component.html',\n  styleUrls: ['./scene.component.scss']\n})\nexport class SceneComponent implements OnInit {\n\n  public faHome = faHome;\n\n  @Input()\n  scene: Scene;\n\n  constructor(private sceneService: SceneService) { }\n\n  ngOnInit() {\n  }\n\n  handleClick(): void {\n    this.sceneService.setScene(this.scene).subscribe();\n  }\n\n}\n","module.exports = \"  <div class=\\\"row pr-2 pl-2 mt-2\\\" [class.favoriteView]=\\\"favoriteView\\\">\\n      <div *ngFor=\\\"let scene of scenes$ | async\\\" \\n      [ngClass]=\\\"{\\n        'p-1 col col-7 col-md-4 col-lg-3 mt-2 pr-1 pl-1': favoriteView,\\n        'p-1 col-6 col-lg-4 mt-2': !favoriteView\\n      }\\\">\\n        <app-scene [scene]=\\\"scene\\\"></app-scene>\\n      </div>\\n  </div>\"","module.exports = \".favoriteView {\\n  overflow-x: scroll;\\n  display: -webkit-inline-box;\\n  width: 100vw; }\\n\"","import { Component, OnInit, Input } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { Scenes } from '../../../../models/scenes.model';\nimport { Store, DefaultStoreDataNames } from 'src/app/shared/store/store';\n\n@Component({\n  selector: 'app-scenes',\n  templateUrl: './scenes.component.html',\n  styleUrls: ['./scenes.component.scss']\n})\nexport class ScenesComponent implements OnInit {\n\n  @Input()\n  favoriteView: Boolean;\n\n  scenes$: Observable<Scenes>;\n\n  constructor(private store: Store) { }\n\n  ngOnInit() {\n    if(this.favoriteView === null)\n      this.favoriteView = false;\n      \n    this.scenes$ = this.store.select(DefaultStoreDataNames.SCENES);\n  }\n\n}\n","export enum NotificationTypes {\n    Success = 'success',\n    Danger = 'danger'\n}","export class Notification {\n    type: string;\n    message: string;\n    displayed: boolean;\n\n    constructor(message: string, type: string) {\n        this.message = message;\n        this.type = type;\n        this.displayed = true;\n    }\n}\n","import { Injectable } from '@angular/core';\nimport { Device } from '../models/device.model';\nimport { HttpParams, HttpResponse, HttpClient } from '@angular/common/http';\nimport { ActionResponse } from '../models/action-response.model';\nimport { environment } from 'src/environments/environment';\nimport { map } from 'rxjs/operators';\nimport { Observable } from 'rxjs';\nimport { NotificationTypes } from 'src/app/shared/models/notification-types.enum';\nimport { NotificationService } from 'src/app/shared/services/notification.service';\nimport { Devices } from '../models/devices.model';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class DeviceImprovementService {\n\n  constructor(private notificationService: NotificationService, private http: HttpClient) { }\n\n  public addMethodsToDevice(device: Device, devices$: Observable<Devices>): Device {\n    if(this.isSwitchType(device))\n          this.addSwitchStateMethod(device, devices$);\n\n    this.addUpdateNameMethod(device, devices$);\n    this.addDescriptionMethod(device, devices$);\n\n    return device;\n  }\n\n  private isSwitchType(device: Device): boolean {\n    return device.SwitchType === \"On/Off\" || device.SwitchType === \"Dimmer\";\n  }\n\n  private addSwitchStateMethod(device: Device, devices$: Observable<Devices>): void {\n    device.switchState = () => {\n      const params = new HttpParams()\n      .set('type', 'command')\n      .append('param', 'switchlight')\n      .append('idx', device.idx)\n      .append('switchcmd', 'Toggle')\n  \n      return this.http.get<ActionResponse>(environment.apiUrl, {params: params, observe: 'response'})\n      .pipe(map((response: HttpResponse<ActionResponse>) => {\n        if(response.body.status === 'OK') {\n          devices$.subscribe();\n          // this.getDevices().subscribe();\n        } else {\n          this.notificationService.sendNotificationTemp(response.body.status + ': ' + response.body.title, NotificationTypes.Danger);\n        }\n        return response.body;\n      }));\n    }\n  }\n\n  private addUpdateNameMethod(device: Device, devices$: Observable<Devices>): void {\n    device.updateName = (name: string) => {\n      const params = new HttpParams()\n        .set('type', 'setused')\n        .append('idx', device.idx)\n        .append('name', name)\n        .append('description', device.Description)\n        .append('used', 'true');\n\n    return this.http.get<ActionResponse>(environment.apiUrl, {params: params, observe: 'response'})\n    .pipe(map((response: HttpResponse<ActionResponse>) => {\n      if(response.body.status === 'OK') {\n        devices$.subscribe();\n      } else {\n        this.notificationService.sendNotificationTemp(response.body.status + ': ' + response.body.title, NotificationTypes.Danger);\n      }\n      return response.body;\n    }));\n    }\n  }\n\n  private addDescriptionMethod(device: Device, devices$: Observable<Devices>): void {\n    device.updateDescription = (description: string) => {\n      const params = new HttpParams()\n      .set('description', description)\n      .append('idx', device.idx)\n      .append('name', device.Name)\n      .append('type', 'setused')\n      .append('used', 'true');\n    \n    return this.http.get<ActionResponse>(environment.apiUrl, {params: params, observe: 'response'})\n    .pipe(map((response: HttpResponse<ActionResponse>) => {\n      if(response.body.status === 'OK') {\n        devices$.subscribe();\n      } else {\n        this.notificationService.sendNotificationTemp(response.body.status + ': ' + response.body.title, NotificationTypes.Danger);\n      }\n      return response.body;\n    })) \n    }\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Device } from '../models/device.model';\nimport { HttpClient, HttpParams } from '@angular/common/http';\nimport { environment } from 'src/environments/environment';\nimport { Observable } from 'rxjs';\nimport { Devices } from '../models/devices.model';\nimport { DefaultStoreDataNames, Store } from 'src/app/shared/store/store';\nimport { map } from 'rxjs/operators';\nimport { DevicesParameters } from '../models/devices-parameters.model';\nimport { DeviceImprovementService } from './device-improvement.service';\n\n@Injectable({\n  providedIn: 'root'\n})\n\nexport class DeviceService {\n\n  constructor(private http: HttpClient, private store: Store, private deviceImprovementService: DeviceImprovementService) { }\n\n  public getDevices(options?: Partial<DevicesParameters>): Observable<Devices> {\n    \n    const defaultParams: DevicesParameters = {\n      type: 'devices',\n      favorite: \"0\",\n      filter: 'all',\n      used: \"true\"\n    }\n    \n    const params: DevicesParameters = {...defaultParams, ...options};\n\n    const httpParams = new HttpParams()\n      .set('type', params.type)\n      .append('favorite', params.favorite)\n      .append('filter', params.filter)\n      .append('used', params.used);\n\n    return this.http.get<Devices>(environment.apiUrl, {\n      params: httpParams\n    }).pipe(map(devices => {\n\n      devices.result = devices.result.map(device => this.deviceImprovementService.addMethodsToDevice(device, this.getDevices(params)));\n\n      this.store.set(DefaultStoreDataNames.DEVICES, devices.result);\n\n      return devices;\n    })\n    ) as Observable<Devices>\n  }\n\n  public getDevice(idx: string): Observable<Device> {\n    const params = new HttpParams()\n    .set('rid', idx)\n    .append('type', 'devices');\n\n    return this.http.get<Device>(environment.apiUrl, {params: params});\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Subject } from 'rxjs';\nimport { Notification } from '../models/notification.model';\nimport { NotificationTypes } from '../models/notification-types.enum';\n\n@Injectable({\n  providedIn: 'root'\n})\n\nexport class NotificationService {\n\n  public notification: Notification;\n  public notificationSubject = new Subject<Notification>();\n\n  constructor() { }\n\n  sendNotificationTemp(message: string, type: NotificationTypes) {\n    this.notification = new Notification(message, type);\n    this.emitNotificationSubject();\n    setTimeout(() => {\n      this.notification.displayed = false;\n    }, 4000);\n  }\n\n  emitNotificationSubject() {\n    this.notificationSubject.next(this.notification);\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { HttpClient, HttpParams } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { environment } from 'src/environments/environment';\nimport { map } from 'rxjs/operators';\nimport { Store, DefaultStoreDataNames } from 'src/app/shared/store/store';\nimport { NotificationService } from 'src/app/shared/services/notification.service';\nimport { ActionResponse } from 'src/app/shared/models/action-response.model';\nimport { NotificationTypes } from 'src/app/shared/models/notification-types.enum';\nimport { Scenes } from '../models/scenes.model';\nimport { Scene } from '../models/scene.model';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class SceneService {\n\n  constructor(private http: HttpClient, private store: Store, private notificationService: NotificationService ) { }\n\n  public getScenes(): Observable<Scenes> {\n    const params = new HttpParams()\n    .set('type', 'scenes');\n\n    return this.http.get<Scenes>(environment.apiUrl, {params: params})\n    .pipe(map(scenes => {\n      this.store.set(DefaultStoreDataNames.SCENES, scenes.result);\n      return scenes;\n    }));\n  }\n\n  public setScene(scene: Scene): Observable<ActionResponse> {\n    const params = new HttpParams()\n    .set('type', 'command')\n    .append('param', 'switchscene')\n    .append('idx', scene.idx)\n    .append('switchcmd', 'On')\n\n    return this.http.get<ActionResponse>(environment.apiUrl, {params: params})\n    .pipe(map(scene => {\n      this.notificationService.sendNotificationTemp(scene.status, scene.status === 'OK' ? NotificationTypes.Success : NotificationTypes.Danger);\n      return scene;\n    }));\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { HttpClientModule } from '@angular/common/http';\nimport { Store } from 'src/app/shared/store/store';\nimport { FontAwesomeModule } from '@fortawesome/angular-fontawesome';\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\nimport { MatSliderModule } from '@angular/material';\nimport { NotificationComponent } from './components/notification/notification.component';\nimport { SceneComponent } from './components/scenes/components/scene/scene.component';\nimport { ScenesComponent } from './components/scenes/components/scenes/scenes.component';\nimport { DeviceComponent } from './components/devices/components/device/device.component';\nimport { DevicesComponent } from './components/devices/components/devices/devices.component';\nimport { NavbarComponent } from './components/navbar/navbar.component';\nimport { RouterModule } from '@angular/router';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    HttpClientModule,\n    RouterModule,\n    FontAwesomeModule,\n    MatSliderModule,\n    BrowserAnimationsModule\n  ],\n  providers: [\n    Store\n  ],\n  declarations: [\n    NotificationComponent,\n    NavbarComponent,\n    DeviceComponent,\n    DevicesComponent,\n    SceneComponent,\n    ScenesComponent\n  ],\n  exports: [\n    NotificationComponent,\n    NavbarComponent,\n    HttpClientModule,\n    FontAwesomeModule,\n    MatSliderModule,\n    BrowserAnimationsModule,\n    DeviceComponent,\n    DevicesComponent,\n    SceneComponent,\n    ScenesComponent\n  ]\n})\nexport class SharedModule { }\n","import { BehaviorSubject, Observable } from 'rxjs';\nimport { State } from './state';\nimport { distinctUntilChanged } from 'rxjs/operators';\nimport { pluck } from 'rxjs/operators';\n\nconst initState: State = {\n    devices: undefined,\n    devicesEditable: false,\n    scenes: undefined\n};\n\nexport enum DefaultStoreDataNames {\n    DEVICES = \"devices\",\n    DEVICES_EDITABLE = \"devicesEditable\",\n    SCENES = \"scenes\"\n}\n\nexport class Store {\n\n    private subject = new BehaviorSubject<State>(initState);\n    private store = this.subject.asObservable().pipe(distinctUntilChanged());\n\n    get value() {\n        return this.subject.value;\n    }\n\n    select<T>(name: string): Observable<T> {\n        return this.store.pipe(pluck(name));\n    }\n\n    set(name: string, state: any) {\n        this.subject.next({\n            ...this.value, [name]: state\n        });\n    }\n}\n","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false,\n  domoticzUrl: 'http://raspberry:8080',\n  apiUrl: 'http://raspberry:8080/json.htm'\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { HTTP_INTERCEPTORS } from '@angular/common/http';\n\nimport { NoopInterceptor } from './noop-interceptor';\n\nexport const httpInterceptorProviders = [\n  { provide: HTTP_INTERCEPTORS, useClass: NoopInterceptor, multi: true },\n];\n","import { Injectable } from \"@angular/core\";\nimport { HttpEvent, HttpInterceptor, HttpHandler, HttpRequest } from \"@angular/common/http\";\nimport { Observable, of } from \"rxjs\";\nimport { catchError } from \"rxjs/operators\";\nimport { NotificationService } from \"src/app/shared/services/notification.service\";\nimport { NotificationTypes } from \"src/app/shared/models/notification-types.enum\";\n\n@Injectable()\nexport class NoopInterceptor implements HttpInterceptor {\n  constructor(private notificationService: NotificationService) {}\n\n  intercept(\n    req: HttpRequest<any>,\n    next: HttpHandler\n  ): Observable<HttpEvent<any>> {\n    return next.handle(req).pipe(catchError((error, caught) => {\n      console.warn(error);\n      if (error.error instanceof ErrorEvent) {\n        this.notificationService.sendNotificationTemp(\n          `Error ${error.status}: ${error.error.error}`,\n          NotificationTypes.Danger\n        );\n      } else if (error.error && error.error.message) {\n        this.notificationService.sendNotificationTemp(\n          `Error ${error.status}: ${error.error.message}`,\n          NotificationTypes.Danger\n        );\n      } else if( error.error instanceof ProgressEvent) {\n        this.notificationService.sendNotificationTemp(\n          `Error ${error.status}: ${error.message}`,\n          NotificationTypes.Danger\n        );\n      } else {\n        this.notificationService.sendNotificationTemp(\n          `Error ${error.status}: ${error.error}`,\n          NotificationTypes.Danger\n        );\n      }\n      return of(error);\n    }) as any);\n  }\n}\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nimport 'hammerjs';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n\n"],"sourceRoot":""}